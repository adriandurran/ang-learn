angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function($scope){$scope.$on("login",function(__,user){$scope.currentUser=user})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function($scope,UserSvc){$scope.login=function(username,password){UserSvc.login(username,password).then(function(response){$scope.$emit("login",response.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostSvc",function($scope,PostSvc){$scope.addPost=function(){$scope.postBody&&PostSvc.create({username:"FatBoyz",body:$scope.postBody}).success(function(post){$scope.posts.unshift(post),$scope.postBody=null})},PostSvc.fetch().success(function(posts){$scope.posts=posts})}]),angular.module("app").service("PostSvc",["$http",function($http){this.fetch=function(){return $http.get("/api/posts")},this.create=function(post){return $http.post("/api/posts",post)}}]),angular.module("app").config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{controller:"PostsCtrl",templateUrl:"layout/templates/posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"layout/templates/register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"layout/templates/login.html"})}]),angular.module("app").service("UserSvc",["$http",function($http){var svc=this;svc.getUser=function(){return $http.get("/api/users",{headers:{"X-Auth":this.token}})},svc.login=function(username,password){return $http.post("/api/sessions",{username:username,password:password}).then(function(val){return svc.token=val.data,$http.defaults.headers.common["X-Auth"]=val.data,svc.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiX18iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdFN2YyIsImFkZFBvc3QiLCJwb3N0Qm9keSIsImNyZWF0ZSIsImJvZHkiLCJzdWNjZXNzIiwicG9zdCIsInBvc3RzIiwidW5zaGlmdCIsImZldGNoIiwic2VydmljZSIsIiRodHRwIiwidGhpcyIsImdldCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwic3ZjIiwiZ2V0VXNlciIsImhlYWRlcnMiLCJYLUF1dGgiLCJ0b2tlbiIsInZhbCIsImRlZmF1bHRzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLFFBQ0FBLE9BQUFDLElBQUEsUUFBQSxTQUFBQyxHQUFBQyxNQUNBSCxPQUFBSSxZQUFBRCxVQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsT0FBQUssU0FDQUwsT0FBQU0sTUFBQSxTQUFBQyxTQUFBQyxVQUNBSCxRQUFBQyxNQUFBQyxTQUFBQyxVQUNBQyxLQUFBLFNBQUFDLFVBQ0FWLE9BQUFXLE1BQUEsUUFBQUQsU0FBQUUsWUNMQWYsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLE9BQUFhLFNBQ0FiLE9BQUFjLFFBQUEsV0FDQWQsT0FBQWUsVUFDQUYsUUFBQUcsUUFDQVQsU0FBQSxVQUNBVSxLQUFBakIsT0FBQWUsV0FDQUcsUUFBQSxTQUFBQyxNQUNBbkIsT0FBQW9CLE1BQUFDLFFBQUFGLE1BQ0FuQixPQUFBZSxTQUFBLFFBS0FGLFFBQUFTLFFBQ0FKLFFBQUEsU0FBQUUsT0FDQXBCLE9BQUFvQixNQUFBQSxXQ2hCQXZCLFFBQUFDLE9BQUEsT0FDQXlCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLE9BQ0FDLEtBQUFILE1BQUEsV0FDQSxNQUFBRSxPQUFBRSxJQUFBLGVBRUFELEtBQUFULE9BQUEsU0FBQUcsTUFDQSxNQUFBSyxPQUFBTCxLQUFBLGFBQUFBLFVDTkF0QixRQUFBQyxPQUFBLE9BQ0E2QixRQUFBLGlCQUFBLFNBQUFDLGdCQUNBQSxlQUNBQyxLQUFBLEtBQ0E5QixXQUFBLFlBQ0ErQixZQUFBLGdDQUVBRCxLQUFBLGFBQ0E5QixXQUFBLGVBQ0ErQixZQUFBLG1DQUVBRCxLQUFBLFVBQ0E5QixXQUFBLFlBQ0ErQixZQUFBLG1DQ2JBakMsUUFBQUMsT0FBQSxPQUNBeUIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsT0FDQSxHQUFBTyxLQUFBTixJQUNBTSxLQUFBQyxRQUFBLFdBQ0EsTUFBQVIsT0FBQUUsSUFBQSxjQUNBTyxTQUFBQyxTQUFBVCxLQUFBVSxVQUdBSixJQUFBekIsTUFBQSxTQUFBQyxTQUFBQyxVQUNBLE1BQUFnQixPQUFBTCxLQUFBLGlCQUNBWixTQUFBQSxTQUNBQyxTQUFBQSxXQUVBQyxLQUFBLFNBQUEyQixLQUdBLE1BRkFMLEtBQUFJLE1BQUFDLElBQUF4QixLQUNBWSxNQUFBYSxTQUFBSixRQUFBSyxPQUFBLFVBQUFGLElBQUF4QixLQUNBbUIsSUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsW1xuXHQnbmdSb3V0ZSdcbl0pO1xuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSkge1xuXHRcdCRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oX18sIHVzZXIpIHtcblx0XHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XG5cdFx0fSk7XG5cdH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMpIHtcblx0XHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcblx0XHRcdFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1Bvc3RzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgUG9zdFN2Yykge1xuXHRcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG5cdFx0XHRcdFBvc3RTdmMuY3JlYXRlKHtcblx0XHRcdFx0XHR1c2VybmFtZTogJ0ZhdEJveXonLFxuXHRcdFx0XHRcdGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuXHRcdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3QpIHtcblx0XHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdFx0XHQkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fVxuXHRcdH1cblx0XHRQb3N0U3ZjLmZldGNoKClcblx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKSB7XG5cdFx0XHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xuXHRcdFx0fSk7XG5cdH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnUG9zdFN2YycsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdFx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuXHRcdH1cblx0XHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3QpIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdFx0fVxuXHR9KTtcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcblx0XHQkcm91dGVQcm92aWRlclxuXHRcdC53aGVuKCcvJywge1xuXHRcdFx0Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ2xheW91dC90ZW1wbGF0ZXMvcG9zdHMuaHRtbCdcblx0XHR9KVxuXHRcdC53aGVuKCcvcmVnaXN0ZXInLCB7XG5cdFx0XHRjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcblx0XHRcdHRlbXBsYXRlVXJsOiAnbGF5b3V0L3RlbXBsYXRlcy9yZWdpc3Rlci5odG1sJ1xuXHRcdH0pXG5cdFx0LndoZW4oJy9sb2dpbicsIHtcblx0XHRcdGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuXHRcdFx0dGVtcGxhdGVVcmw6ICdsYXlvdXQvdGVtcGxhdGVzL2xvZ2luLmh0bWwnXG5cdFx0fSlcblx0fSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCkge1xuXHRcdHZhciBzdmMgPSB0aGlzO1xuXHRcdHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0XHRoZWFkZXJzOnsnWC1BdXRoJzp0aGlzLnRva2VufVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHN2Yy5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdFx0cGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24odmFsKSB7XG5cdFx0XHRcdHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuXHRcdFx0XHQkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YTtcblx0XHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
